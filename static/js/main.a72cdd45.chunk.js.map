{"version":3,"sources":["layout/header/Header.js","layout/nav/Nav.js","layout/footer/Footer.js","error/Error.js","resourcesPanel/resource/Resource.js","resourcesPanel/ResourcesPanel.js","resourceDetail/pagination/Pagination.js","resourceDetail/list/List.js","resourceDetail/ResourceDetail.js","entryDetail/entryCard/subList/SubList.js","entryDetail/entryCard/EntryCard.js","entryDetail/EntryDetail.js","research/selectform/Selectform.js","research/searchresult/Searchresult.js","research/Research.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Nav","to","Footer","Error","props","role","message","Resource","resourceName","index","ResourcesPanel","getResources","Axios","get","baseUrl","then","response","makeResourcesList","data","catch","error","setState","isLoaded","resourcesList","Object","keys","map","state","this","React","Component","Pagination","nextPage","previousPage","previous","previousUrl","parseInt","page","next","nextUrl","List","entriesList","entries","value","pathname","detailurl","url","href","ResourceDetail","useParams","useState","setResponse","useEffect","results","SubList","subListItems","subEntry","EntryCard","listItems","entry","key","Array","isArray","EntryDetail","useLocation","Selectform","handleChange","event","target","onChange","htmlFor","id","type","Searchresult","console","log","searchResult","Research","requestToSwapi","App","path","children","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a72cdd45.chunk.js","sourcesContent":["function Header() {\r\n    return(\r\n        <header className=\"bg-dark text-white p-5 text-center\">\r\n            <h1>Discover the world of Star Wars</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import {Link} from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n    return(\r\n        <ul className=\"nav bg-warning\">\r\n            <li className=\"nav-item\">\r\n                <Link to=\"/home\" className=\"nav-link text-dark\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <Link to=\"/research\" className=\"nav-link text-dark\">Research</Link>\r\n            </li>\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Nav;","function Footer() {\r\n    return(\r\n        <header className=\"bg-dark text-white p-5 text-center mt-0 mb-0\">\r\n            <p>A sample app to help the students understand React and the REST API</p>\r\n            <p>Sincere Thanks to the SWAPI team (https://swapi.dev/) for their awesome free and open API</p>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Footer;","function Error(props) {\r\n    return(\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n            {props.message}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Error;","import {Link} from \"react-router-dom\";\r\n\r\n// Représente un carré avec un nom de ressources (exemple: planet ou autre)\r\n// Attend comme paramètre une clef et un nom de ressources\r\nfunction Resource(props) {\r\n    return (\r\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3\" key={props.index}>\r\n            <div className=\"alert bg-dark my-3 py-5 text-center\" role=\"alert\">\r\n                <Link  className=\"text-warning\" to={\"/resource/\" + props.resourceName + \"/page/1\"}>\r\n                    {props.resourceName}\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Resource;","import React from \"react\";\r\nimport Axios from \"axios\";\r\nimport Error from \"../error/Error\";\r\nimport Resource from \"./resource/Resource\";\r\n\r\nclass ResourcesPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.baseUrl = \"https://swapi.dev/api/\";\r\n        // Stocke les différents états de la requête vers Swapi et le message du composant Character\r\n        this.state = {\r\n            resourcesList: null,\r\n            error: null,\r\n            isLoaded: false,\r\n            message: \"Chargement en cours\"\r\n        };\r\n    }\r\n\r\n    getResources= () => {\r\n        // On lance la requête et selon le résultat on met à jour l'état du composant\r\n        Axios.get(this.baseUrl)\r\n        .then((response) => {\r\n            // On génére la liste de composants ressources\r\n            this.makeResourcesList(response.data);\r\n        })\r\n        .catch((error) => {\r\n            this.setState({\r\n                error: error,\r\n                isLoaded: true,\r\n                resourcesList: null,\r\n                message: \"Un problème est survenu, nous ne parvenons pas à récupérer les données\"\r\n            });\r\n        })\r\n    }\r\n\r\n    // Génère une liste de composant ressources sur la base des données reçues de l'API\r\n    makeResourcesList = (data) => {\r\n        const resourcesList = Object.keys(data).map((resourceName, index) =>\r\n            <Resource index={index} resourceName={resourceName}/>\r\n        );\r\n        this.setState({ \r\n            resourcesList : resourcesList,\r\n            isLoaded: true,\r\n            error: null,\r\n            message: null \r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getResources();\r\n    }\r\n\r\n    render() {\r\n        if(this.state.isLoaded) {\r\n            if(this.state.error) {\r\n                return(\r\n                    <Error message={this.state.message} />\r\n                );\r\n            }\r\n            else {\r\n                return(\r\n                    <section>\r\n                        <h2>Click and start to explore !</h2>\r\n                        <div className=\"row\">\r\n                            {this.state.resourcesList}\r\n                        </div>\r\n                    </section>\r\n                ); \r\n            } \r\n        }\r\n        return (\r\n            <p>{this.state.message}</p>\r\n        );  \r\n    }\r\n}\r\n\r\nexport default ResourcesPanel;","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n// Composant qui affiche au besoin les boutton de page suivante et précédente\r\n// Attend le nom de la ressource, la page actuelle, la page suivante et précédente\r\nfunction Pagination(props) {\r\n\r\n    // Par défaut les élements DOM sont à null donc rien de s'affiche\r\n    let nextPage = null;\r\n    let previousPage = null;\r\n    // Si une page précédente existe on crée le lien vers l'url\r\n    if(props.previous) {\r\n        // On recrée l'url en décrémentant la page de 1\r\n        let previousUrl = \"/resource/\" + props.resourceName + \"/page/\" + (parseInt(props.page) - 1);\r\n        previousPage = <Link to={previousUrl} className=\"btn btn-dark text-warning mx-2\">Previous</Link>\r\n    }\r\n    // Si une page suivante existe on crée le lien vers l'url\r\n    if(props.next) {\r\n        // On recrée l'url en incrémenant la page de 1\r\n        let nextUrl = \"/resource/\" + props.resourceName + \"/page/\" + (parseInt(props.page) + 1);\r\n        nextPage = <Link to={nextUrl} className=\"btn btn-dark text-warning mx-2\">Next</Link>\r\n    }\r\n    return(\r\n        <div className=\"mt-3 text-center\">\r\n            {previousPage}\r\n            {nextPage}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pagination","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n// Composant qui affiche au besoin les boutton de page suivante et précédente\r\n// Attend le nom de la ressource, la page actuelle, la page suivante et précédente\r\nfunction List(props) {\r\n\r\n    const entriesList = props.entries.map((value, index) =>\r\n            <li key={index} className=\"list-group-item bg-dark border-bottom border-secondary\">\r\n                <Link \r\n                    to={\r\n                        {\r\n                        pathname: \"/resource/\" + props.resourceName + \"/detail\",\r\n                        state: {detailurl: value.url}\r\n                        }\r\n                       } \r\n                    className=\"text-warning\" href=\"\"\r\n                >\r\n                    {value[Object.keys(value)[0]]}\r\n                </Link>\r\n            </li>\r\n        );\r\n\r\n    return(\r\n        <ul className=\"list-group\">\r\n            {entriesList}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default List","import {useState, useEffect} from \"react\";\r\nimport Axios from \"axios\";\r\nimport Error from \"../error/Error\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport Pagination from \"./pagination/Pagination\";\r\nimport List from \"./list/List\";\r\n\r\nfunction ResourceDetail () {\r\n    // On récupère les paramètres d'url resourceName et page définis dans App.js à l'aide du hook propre au routeur useParams()\r\n    const {resourceName, page} = useParams();\r\n    // On défini l'url de base à requêter composée à l'aide du paramètre d'url\r\n    const baseUrl = \"https://swapi.dev/api/\" + resourceName + \"/?page=\" + page;\r\n    // On définit une variable response qui est équivalent aux états dans les classes, on défini également une fonction pour la modifier\r\n    // Pour utiliser les états on fait appel au hook useState auquel on passe par défaut un objet qui est stocké dans response\r\n    const [response, setResponse] = useState(\r\n        {\r\n            data: null,\r\n            error: null,\r\n            isLoaded: false,\r\n            message: \"Chargement en cours\"\r\n        }\r\n    )\r\n\r\n    function getResource() {\r\n        // On lance la requête et selon le résultat on met à jour l'état du composant\r\n        Axios.get(baseUrl)\r\n        .then((response) => {\r\n            setResponse({ \r\n                data: response.data,\r\n                isLoaded: true,\r\n                error: null,\r\n                message: null \r\n            });\r\n        })\r\n        .catch((error) => {\r\n            setResponse({\r\n                data: null,\r\n                error: error,\r\n                isLoaded: true,\r\n                message: \"Un problème est survenu, nous ne parvenons pas à récupérer les données \"\r\n            });\r\n        })\r\n    }\r\n\r\n    // Ce hook est appelé à chaque modification de l'UI, ici il remplace componentDidMount() des classes\r\n    // Notez qu'on passe en paramètre la variable à traquer, dès qu'elle change useEffect est appelé, si tableau vide la fonction n'est appelée qu'une fois\r\n    // Ici c'est la page qui peut éventuellement être modifiée en cliquant sur les boutons\r\n    useEffect(() => {\r\n            getResource();\r\n      }, [page]);\r\n\r\n      // A la fin de la fonction on gére les différents affichages\r\n    if(response[\"isLoaded\"]) {\r\n        if(response[\"error\"]) {\r\n            return(\r\n                <Error message={response[\"message\"]} />\r\n            );\r\n        }\r\n        else {\r\n            return(\r\n                <section>\r\n                    <h2>Detail of the {resourceName} resource</h2>\r\n                    <List entries={response.data.results} resourceName={resourceName}/>\r\n                    <Pagination resourceName={resourceName} page={page} next={response.data.next} previous={response.data.previous}/>\r\n                </section>\r\n            ); \r\n        } \r\n    }\r\n    return (\r\n        <p>{response[\"message\"]}</p>\r\n    );  \r\n}\r\n\r\nexport default ResourceDetail;","function SubList(props) {\r\n    // On parcours le tableau trouvé dans Entrycard et passé dans les props\r\n    // Pour chaque valeur on crée un li dans la sous liste\r\n    const subListItems = props.subEntry.map((value, index)=>\r\n        <li key={index} className=\"bg-dark text-warning\">\r\n            {value}\r\n        </li>\r\n    );\r\n\r\n    return (\r\n        <ul>\r\n            {subListItems}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default SubList;","import SubList from \"./subList/SubList\";\r\n\r\nfunction EntryCard(props) {\r\n    // variable qui contient les li de la carte de présentation d'une entrée\r\n    // Pour chaque clef de l'objet on crée un li à l'aide de map (map ne fonctionne pas sur un objet on utilise donc Object.keys qui renvoie un tableau de clef)\r\n    const listItems = Object.keys(props.entry).map((key, index) => {\r\n                let value = props.entry[key];\r\n                // Si la valeur de la clef est un tableau on crée alors une sous liste\r\n                if (Array.isArray(value)) value = <SubList subEntry={value} />;\r\n                return(\r\n                    <li key={index} className=\"list-group-item bg-dark border-bottom border-secondary text-warning\">\r\n                        {key} : {value}\r\n                    </li>\r\n                );\r\n            }   \r\n        );\r\n\r\n    return(\r\n        <ul className=\"list-group\">\r\n            {listItems}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default EntryCard;","import {useState, useEffect} from \"react\";\r\nimport Axios from \"axios\";\r\nimport Error from \"../error/Error\";\r\nimport {useLocation} from \"react-router-dom\";\r\nimport EntryCard from \"./entryCard/EntryCard\";\r\n\r\nfunction EntryDetail() {\r\n    // On récupère l'url à requêter passée dans les états de l'objet location dans list.js\r\n    const baseUrl = useLocation().state.detailurl;\r\n    const [response, setResponse] = useState(\r\n        {\r\n            data: null,\r\n            error: null,\r\n            isLoaded: false,\r\n            message: \"Chargement en cours\"\r\n        }\r\n    )\r\n\r\n    function getResource() {\r\n        // On lance la requête et selon le résultat on met à jour l'état du composant\r\n        Axios.get(baseUrl)\r\n        .then((response) => {\r\n            setResponse({ \r\n                data: response.data,\r\n                isLoaded: true,\r\n                error: null,\r\n                message: null \r\n            });\r\n        })\r\n        .catch((error) => {\r\n            setResponse({\r\n                data: null,\r\n                error: error,\r\n                isLoaded: true,\r\n                message: \"Un problème est survenu, nous ne parvenons pas à récupérer les données \"\r\n            });\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getResource();\r\n    }, []);\r\n\r\n    if(response[\"isLoaded\"]) {\r\n        if(response[\"error\"]) {\r\n            return(\r\n                <Error message={response[\"message\"]} />\r\n            );\r\n        }\r\n        else {\r\n            return(\r\n                <EntryCard entry={response.data} />\r\n            );\r\n        }\r\n    }\r\n    return (\r\n        <p>{response[\"message\"]}</p>\r\n    );\r\n}\r\n\r\nexport default EntryDetail;","import React from \"react\";\r\n\r\nclass Selectform extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // On stocke dans un état une valeur par défaut pour le formulaire\r\n        this.state = {\r\n            value: 1\r\n        }\r\n    }\r\n\r\n    // Méthode qui permet de récupérer l'évènement et donc la valuer du formulaire tapée par l'utlisateur\r\n    // On peut ensuite passer cette valeur à la méthode de requête vers Swapi qu'on a passée en propriété\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            value: event.target.value\r\n        })\r\n        this.props.onChange(event.target.value);\r\n    }\r\n\r\n    // On affiche le formulaire qui à chaque changement déclenche la méthode handleChange\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form>\r\n                    <label htmlFor=\"selectCharacter\" className=\"form-label\">Write your id here</label>\r\n                    <input id=\"selectCharacter\" value={this.state.value} className=\"form-control w-50\" type=\"text\" onChange={this.handleChange}></input>\r\n                </form>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Selectform;","import React from \"react\";\r\nimport EntryCard from \"../../entryDetail/entryCard/EntryCard\";\r\nimport Error from \"../../error/Error\";\r\n// Notons que ce composant aurait pu être fait sous forme de fonction car il ne gère pas d'état\r\nclass Searchresult extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    // On conditionne l'affichage aux données passée en propriétés du composant et on réemploi des composants existants\r\n    // Si aucun message, tout s'est bien passé alors on peut afficher le personnage\r\n    render() {\r\n        console.log(this.props.searchResult);\r\n        if(this.props.searchResult.isLoaded) {\r\n            if(!this.props.searchResult.error) {\r\n                return(\r\n                    <div>\r\n                        <EntryCard entry={this.props.searchResult.data} />\r\n                    </div>\r\n                );\r\n            }\r\n            else {\r\n                return <Error message={this.props.searchResult.message}/>;\r\n            }\r\n        }\r\n        // Message de chargement par défaut\r\n        return (\r\n            <p className=\"alert alert-light\">{this.props.searchResult.message}</p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Searchresult;","import React from \"react\";\r\nimport Axios from \"axios\";\r\n// Représente le formulaire de sélection d'un personnage\r\nimport Selectform from \"./selectform/Selectform\";\r\n// Représente l'affichage d'un personnage ou d'un message\r\nimport Searchresult from \"./searchresult/Searchresult\";\r\n\r\nclass Research extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // Stocke les différents états de la requête vers Swapi et le message du composant searchResult\r\n        this.state = {\r\n            data: null,\r\n            error: null,\r\n            isLoaded: false,\r\n            message: \"Chargement en cours\"\r\n        }\r\n    }\r\n\r\n    // fonction déclenché quand l'utilisateur écrit un ID dans le formulaire et qui lance la requête vers la l'API\r\n    handleChange = (id) => {\r\n        this.requestToSwapi(id)\r\n    }\r\n\r\n    // Requête qui va chercher un personnage swapi, par défaut le personnage d'id 1, autrement l'id qu'on passe en paramètre\r\n    // Cette fonction  est appelée à la création du composant et chaque fois que le formulaire change(on la passe donc au form)\r\n    // Ici on utilise une fonction fléchée pour associer this à la classe Research et pouvoir appeler setState\r\n    requestToSwapi= (id=1) => {\r\n        // On construit l'url\r\n        let url = \"https://swapi.dev/api/people/\" + id + \"/\";\r\n        // On lance la requête et selon le résultat on met à jour l'état du composant\r\n        Axios.get(url)\r\n        .then((response) => {\r\n            this.setState({\r\n                data: response.data,\r\n                isLoaded: true,\r\n                error: null,\r\n                message: null\r\n            });\r\n        })\r\n        .catch((error) => {\r\n            this.setState({\r\n                data: null,\r\n                error: error,\r\n                isLoaded: true,\r\n                message: \"Nous n'avons pas réussi à récupérer la ressource, vérifiez que l'id existe\"\r\n            });\r\n        })\r\n    }\r\n\r\n    // Au moment ou le composant est monté (affiché pour la première fois) on requête swapi avec notre méthode sans passer de paramètre\r\n    componentDidMount() {\r\n        this.requestToSwapi();\r\n    }\r\n\r\n    // Ici on affiche le formulaire et le personnage dans une structure HTML\r\n    // On passe au formulaire la méthode à déclencher quand l'utilisateur change sa valeur\r\n    // On passe au composant de résultat les données de la requête contenues dans l'état\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h2>Write character's ID</h2>\r\n                <Selectform onChange={this.handleChange}/>\r\n                <section className=\"my-5\">\r\n                    <h3>Selected character :</h3>\r\n                    <Searchresult searchResult={this.state}/>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Research;","import './App.css';\nimport Header from './layout/header/Header';\nimport Nav from './layout/nav/Nav';\nimport Footer from './layout/footer/Footer';\nimport ResourcesPanel from './resourcesPanel/ResourcesPanel';\nimport ResourceDetail from './resourceDetail/ResourceDetail';\nimport EntryDetail from './entryDetail/EntryDetail';\nimport Research from './research/Research';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Router>\n        <Nav />\n        <main className=\"container my-5\">\n          <Switch>\n            <Route path=\"/home\">\n              <ResourcesPanel />\n            </Route>\n            <Route path=\"/research\">\n              <Research />\n            </Route>\n            <Route path=\"/resource/:resourceName/page/:page\" children={<ResourceDetail />} />\n            <Route path=\"/resource/:resourceName/detail\" children={<EntryDetail />} />\n            <Route path=\"\">\n              <ResourcesPanel />\n            </Route>\n          </Switch>\n        </main>\n      </Router>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}